name: CI/CD Pipeline
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

on:
  # Runs on pushes targeting the default branch
  push:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

# Default to bash
defaults:
  run:
    shell: bash

jobs:
  # Build job
  build:
    name: Build Site 🛠️
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Run linter
        run: pnpm lint

      - name: Set Environment Variables
        env:
          CC_API_KEY: ${{ secrets.CC_API_KEY }}
          WORDPRESS_API_URL: ${{ secrets.WORDPRESS_API_URL }}
        run: |
          echo "" > .env.production
          echo CC_API_KEY="$CC_API_KEY" >> .env.production
          echo WORDPRESS_API_URL="$WORDPRESS_API_URL" >> .env.production

      - name: Build with Next.js
        run: pnpm build

  # Jest job
  #  test:
  #    name: Unit Tests 🧪
  #    runs-on: ubuntu-latest
  #    needs: build
  #    steps:
  #      - uses: actions/checkout@v4
  #      - uses: actions/setup-node@v4
  #        with:
  #          node-version: '20'
  #      - run: pnpm install
  #      - run: pnpm run test

  # Deployment job
  deploy:
    name: Deploy 🚀
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Install Vercel CLI
        run: pnpm add --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.CC_VERCEL_TOKEN }}

      - name: Set Environment Variables
        env:
          CC_API_KEY: ${{ secrets.CC_API_KEY }}
          WORDPRESS_API_URL: ${{ secrets.WORDPRESS_API_URL }}
        run: |
          echo "" > .env.production
          echo CC_API_KEY="$CC_API_KEY" >> .env.production
          echo WORDPRESS_API_URL="$WORDPRESS_API_URL" >> .env.production

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.CC_VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.CC_VERCEL_TOKEN }}
